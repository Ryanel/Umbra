#pragma once

#include <assert.h>
#include <stddef.h>
#include <stdint.h>

namespace std {

// A linked list
template <class T>
class list {
   private:
    struct node {
        node* m_next;
        node* m_prev;
        T     value;
        node(node* next, node* prev, T val) : m_next(next), m_prev(prev), value(val) {}
    };

   private:
    uint32_t m_size;
    node*    m_head;
    node*    m_tail;

   public:
    list() : m_size(0), m_head(nullptr), m_tail(nullptr) {}

    // Iterators
    struct iterator {
        iterator(node* ptr) : m_ptr(ptr) {}
        T& operator*() const { return m_ptr->value; }
        T* operator->() { return m_ptr->value; }

        iterator& operator++() {
            m_ptr = m_ptr->m_next;
            return *this;
        }
        iterator operator++(int) {
            iterator tmp = *this;
            ++(*this);
            return tmp;
        }

        iterator& operator--() {
            m_ptr = m_ptr->m_prev;
            return *this;
        }
        iterator operator--(int) {
            iterator tmp = *this;
            --(*this);
            return tmp;
        }

        friend bool operator==(const iterator& a, const iterator& b) { return a.m_ptr == b.m_ptr; };
        friend bool operator!=(const iterator& a, const iterator& b) { return a.m_ptr != b.m_ptr; };

       private:
        node* m_ptr;
        friend list;
    };

    iterator begin() { return iterator(m_head); }
    iterator end() { return iterator(nullptr); }

    // Methods
    void clear() {
        while (m_head != nullptr) { pop_front(); }
        m_size = 0;
    }

    T& front() {
        assert(m_head != nullptr);
        return m_head->value;
    }
    T& back() {
        assert(m_tail != nullptr);
        return m_tail->value;
    }

    void push_front(const T& value) {
        node* new_node = new node(m_head, nullptr, value);
        if (m_tail == nullptr) { m_tail = new_node; }
        if (m_head != nullptr) { m_head->m_prev = new_node; }
        m_head = new_node;
        m_size++;
    }

    void push_back(const T& value) {
        node* new_node = new node(nullptr, m_tail, value);
        if (m_head == nullptr) { m_head = new_node; }
        if (m_tail != nullptr) { m_tail->m_next = new_node; }
        m_tail = new_node;
        m_size++;
    }

    void pop_front() {
        assert(m_head != nullptr);
        auto* n = m_head;          // Get old head
        m_head  = m_head->m_next;  // Swap node
        if (m_head != nullptr) {
            m_head->m_prev = nullptr;
        } else {
            m_tail = nullptr;
        }
        delete n;  // Delete old head
        m_size--;
    }

    void pop_back() {
        assert(m_tail != nullptr);
        auto* n = m_tail;          // Get old tail
        m_tail  = m_tail->m_prev;  // Swap node
        if (m_tail != nullptr) {
            m_tail->m_next = nullptr;
        } else {
            m_head = nullptr;
        }
        delete n;  // Delete old tail
        m_size--;
    }

    iterator erase(iterator pos) {
        assert(pos != end());
        if (m_size == 0) { return end(); }

        node* before = pos.m_ptr->m_prev;
        node* after  = pos.m_ptr->m_next;

        if (before && after) {
            before->m_next = after;
            after->m_prev  = before;
            return iterator(after);
        } else if (before && !after) {
            // Last element
            pop_back();
            return iterator(nullptr);
        } else if (!before && after) {
            // First element
            pop_front();
            return iterator(m_head);
        }

        return iterator(nullptr);
    }

    bool   empty() const { return m_head == nullptr; }
    size_t size() const { return m_size; };
};

}  // namespace std