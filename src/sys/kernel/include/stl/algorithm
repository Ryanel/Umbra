#pragma once

namespace std {

// std::find
template <class InputIt, class T>
constexpr InputIt find(InputIt first, InputIt last, const T& value) {
    for (; first != last; ++first) {
        if (*first == value) { return first; }
    }
    return last;
}

template <class InputIterator, class UnaryPredicate>
InputIterator find_if(InputIterator first, InputIterator last, UnaryPredicate pred) {
    while (first != last) {
        if (pred(*first)) return first;
        ++first;
    }
    return last;
}

// std::min, std::max
template <typename T>
constexpr T const& max(T const& a, T const& b) {
    return a > b ? a : b;
}

template <typename T>
constexpr T const& min(T const& a, T const& b) {
    return a < b ? a : b;
}

}  // namespace std